source("./modelli/logisticRegression.R")
logit.predictions.comparsion.class
validation$OutcomeType
logit.predictions.comparsion.class = predict(logit.model.train, validation, type="class")
as.numeric(logit.predictions.comparsion.class)
as.numeric(validation$OutcomeType)
logit.predictions.comparsion.class[1:10]
validation$OutcomeType[1:10]
table(logit.predictions.comparsion.class,validation$OutcomeType)
source("functions.R")
logit.misc.table = misc.table(logit.predictions.comparsion.class, validation$OutcomeType)
logit.misc.table
source("load.R")
source("modelli/logisticRegression.R")
source("load.R")
str(kaggle.dataset)
str(kaggle.dataset)
source("load.R")
str(kaggle.dataset)
logit.misc.table = misc.table(logit.predictions.comparsion.class, validation$OutcomeType)
logit.model.train
probs = predict(logit.model.train,validation, type="probs")
probs
pro
probs[1:10]
probs[1:10,]
ids = kaggle.dataset$ID[1:10]
ids
probs[,Id] = ids
probs$Id = ids
probs[1:10]
probs = predict(logit.model.train,validation, type="probs")[1:10]
probs[1:10,]
probs = predict(logit.model.train,validation, type="probs")[1:10,]
probs
probs = predict(logit.model.train,validation, type="probs")[1:10,1]
probs = predict(logit.model.train,validation, type="probs")[1:10,]
probs[1]
probs[1,1]
probs[1,2]
probs[1,3]
probs[1,4]
df = data.frame()
df$Id = ids
ids
df = data.frame(ids)
df
df$Adoption = probs[,1]
df
df$Died = probs[,2]
df$Euthanasia= probs[,3]
df$Return_to_owner= probs[,4]
df$Transfer = probs[,5]
df
probs
probs = predict(logit.model.train,validation, type="class")[1:10,]
probs = predict(logit.model.train,validation, type="class")
probs
probs[1:10]
df$Id
df$ids
df
write.csv(df, file = "asd.csv",row.names=FALSE, na="")
write.csv(df, file = filepath,row.names=FALSE, na="",quote=FALSE)
write.csv(df, file = "asd.csv",row.names=FALSE, na="",quote=FALSE)
options(scipen = 50)
write.csv(df, file = "asd.csv",row.names=FALSE, na="",quote=FALSE)
options(scipen = 10)
write.csv(df, file = "asd.csv",row.names=FALSE, na="",quote=FALSE)
write.csv(df, file = "asd.csv",row.names=FALSE, na="",quote=FALSE)
options(scipen = 50)
write.csv(df, file = "asd.csv",row.names=FALSE, na="",quote=FALSE)
?options
source("modelli/logisticRegression.R")
str(dataset)
dataset$PrimaryColor = factor(dataset$PrimaryColor, levels=c(levels(dataset$PrimaryColor), levels(kaggle.dataset$PrimaryColor)))
list = c(levels(dataset$PrimaryColor), levels(kaggle.dataset$PrimaryColor))
list
unique(list)
primaryColorList = unique(c(levels(dataset$PrimaryColor), levels(kaggle.dataset$PrimaryColor)))
str(dataset)
dataset$PrimaryColor = factor(dataset$PrimaryColor, levels=primaryColorList)
str(dataset)
str(kaggle.dataset)
kaggle.dataset$PrimaryColor = factor(dataset$PrimaryColor, levels=primaryColorList)
kaggle.dataset$PrimaryColor = factor(kaggle.dataset$PrimaryColor, levels=primaryColorList)
str(kaggle.dataset)
source("load.R")
primaryBreedList
str(dataset)
str(kaggle.dataset)
source("modelli/logisticRegression.R")
logit.predictions.full.probs[1:10]
writePredictions(logit.predictions.full.probs, kaggle.dataset$Id, "previsioni/logit.csv")
nrow(logit.predictions.full.probs)
nrow(kaggle.dataset$Id)
nrow(kaggle.dataset)
nrow(kaggle.dataset$ID)
nrow(kaggle.dataset)
nrow(kaggle.dataset$ID)
kaggle.dataset[1:10,]
kaggle.dataset[1:10,ID]
kaggle.dataset[1:10,1]
kaggle.dataset[1:100,1]
writePredictions(logit.predictions.full.probs, kaggle.dataset[,1], "previsioni/logit.csv")
ids = kaggle.dataset[1:100,1]
ids
df = data.frame(ids)
df
df$ID = df$ids
df[1,]
df = df[,-c(1)] # toglie la colonna ids
df[1,]
df
probs = logit.predictions.full.probs[1:100]
probs
probs = logit.predictions.full.probs[1:100,]
probs
df$Adoption = probs[,1]#
    df$Died = probs[,2]#
    df$Euthanasia= probs[,3]#
    df$Return_to_owner= probs[,4]#
    df$Transfer = probs[,5]
df$Adoption = probs[,1]
df
df = data.frame(ids)
df$ID = df$ids
df = df[,-c(1)] # toglie la colonna ids
df
df = data.frame(c(ids, probs[,1])
)
df
?data.frame
df = data.frame(ids)
df$ID = df$ids
df
df$Adoption = probs[,1]
df$Died = probs[,2]#
    df$Euthanasia= probs[,3]#
    df$Return_to_owner= probs[,4]#
    df$Transfer = probs[,5]
df = df[,-c(1)] # toglie la colonna ids
df
options(scipen = 50) # Evita la rappresentazione esponenziale nella stampa del file
write.csv(df, file = "previsioni/logit.csv",row.names=FALSE, na="",quote=FALSE)
source("functions.R")
source("modelli/logisticRegression.R")
dataset = read.csv("test.csv")
dataset[dataset$AgeuponOutcome == "",]
dataset[dataset$AgeuponOutcome == ""] = "-1 years"
dataset[dataset$AgeuponOutcome == "",] = "-1 years"
str(dataset$AgeuponOutcome)
#danni$comu = factor(danni$comu, levels=c(levels(danni$comu),"","other"))
dataset$AgeuponOutcome = factor(dataset$AgeuponOutcome, levels=c(levels(dataset$AgeuponOutcome),"-1 years"))
str(dataset$AgeuponOutcome)
dataset$AgeuponOutcome[dataset$AgeuponOutcome == ""] = "-1 years"
dataset$AgeuponOutcome = factor(dataset$AgeuponOutcome)
str(dataset$AgeuponOutcome)
table(dataset$AgeuponOutcome)
data2 = read.csv("test.csv")
table(data2$AgeuponOutcome)
str(data2$AgeuponOutcome)
dataset$AgeuponOutcome[dataset$AgeuponOutcome == "-1 years"]
dataset$AgeuponOutcome[dataset$AgeuponOutcome == ""]
dataset = read.csv("test.csv")
dataset$AgeuponOutcome = factor(dataset$AgeuponOutcome, levels=c(levels(dataset$AgeuponOutcome),"-1 years"))
str(dataset$AgeuponOutcome)
dataset$AgeuponOutcome[dataset$AgeuponOutcome == ""] = "-1 years"
str(dataset$AgeuponOutcome)
dataset$AgeuponOutcome = factor(dataset$AgeuponOutcome)
str(dataset$AgeuponOutcome)
str(d2$AgeuponOutcome)
2d
dataset$AgeuponOutcome[dataset$AgeuponOutcome == ""]
dataset$AgeuponOutcome[dataset$AgeuponOutcome == "-1 years"]
dataset[dataset$AgeuponOutcome == "-1 years",]
dataset[dataset$AgeuponOutcome == "",]
str(d2)
str(dataset$AgeuponOutcome)
table(dataset$AgeuponOutcome)
table(d2$AgeuponOutcome)
data2 = read.csv("test.csv")
str(data2$AgeuponOutcome)
source("load.R")
source("graphs.R")
outcomesByAgeCategory()
source("modelli/logisticRegression.R")
f1
f1 = as.formula(paste("OutcomeType ~", paste(names(train)[-c(1)], collapse="+"), collapse=NULL))
f1
asd = c(24, 4, 234,2)
wich.min(asd)
which.min(asd)
asd[4]
source("load.R")
source("modelli/logisticRegression.R")
source("modelli/logisticRegression.R")
min.k
decay[1]
source("modelli/logisticRegression.R")
logit.misc.table
source("modelli/tree.R")
source("modelli/tree.R")
source("load.R")
source("modelli/tree.R")
source("modelli/tree.R")
source("modelli/tree.R")
str(train)
source("modelli/tree.R")
source("modelli/tree.R")
source("modelli/tree.R")
str(trainAlt)
source("modelli/tree.R")
source("modelli/tree.R")
tree.predictions.comparsion.class
tree.misc.table = misc.table(tree.predictions.comparsion.class, validation$OutcomeType)
tree.misc.error = 1 - sum(diag(tree.misc.table))/sum(tree.misc.table)
tree.misc.error
tree.misc.table
J
tree.temp$size[tree.temp$dev==min(tree.temp$dev)]
tree.predictions.full.probs = predict(tree.model.full, kaggle.datasetAlt, type="vector")
tree.predictions.full.probs
sum(tree.predictions.full.probs[1,])
sum(tree.predictions.full.probs[43,])
writePredictions(tree.predictions.full.probs, kaggle.dataset[,1], "previsioni/tree.csv")
library(randomForest)
install.packages("randomForest", dependencies=T)
source("modelli/randomForest.R")
forest.misc.error
forest.misc.table
forest.predictions.comparsion.class[1:10]
forest.predictions.comparsion.probs[1:10]
forest.predictions.full.probs[1:10]
forest.model.full.2 = randomForest(f1, data=dataset, mtry=best.mtry, ntree=best.ntree)
forest.model.full.2
forest.predictions.full.probs = predict(forest.model.full.2, kaggle.dataset, type="prob")
writePredictions(forest.predictions.full.probs, kaggle.dataset[,1], "previsioni/forest2.csv")
forest.model.full
str(datasetAlt)
source("modelli/randomForest.R")
forest.misc.table
forest.model.full
forest.model.full2
forest.model.full.2
best.decay
best.mtry
best.ntree
err
str(trainAlt)
forest.misc.table
forest.misc.error
nrow(train)
nrow(test)
nrow(validation)
test[1:10,]
validation[1:10,]
